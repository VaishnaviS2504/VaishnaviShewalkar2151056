Question 2: Enrollment Management
Extend the program from Question 1 to include the Enrollment class and implement the ability to enroll a student in a course. Ensure that the program prevents enrolling a student in a course if it has reached its maximum capacity
package que2;
import java.util.ArrayList;
import java.util.List;
class Student {
    private int studentId;
    private String studentName;
    public Student(int studentId, String studentName) {
        this.studentId = studentId;
        this.studentName = studentName;
    }
    public int getStudentId() {
        return studentId;
    }
    public String getStudentName() {
        return studentName;
    }
    @Override
    public String toString() {
        return "Student ID: " + studentId + ", Student Name: " + studentName;
    }
}
class Course {
    private int courseId;
    private String courseName;
    private int maxCapacity;
    private List<Student> enrolledStudents;
    public Course(int courseId, String courseName, int maxCapacity) {
        this.courseId = courseId;
        this.courseName = courseName;
        this.maxCapacity = maxCapacity;
        this.enrolledStudents = new ArrayList<>();
    }
    public int getCourseId() {
        return courseId;
    }    public String getCourseName() {
        return courseName;
    }
public boolean isFull() {
        return enrolledStudents.size() >= maxCapacity;
    }
    public boolean enrollStudent(Student student) {
        if (!isFull()) {
            enrolledStudents.add(student);
            return true;
        }
        return false;
    }
    public List<Student> getEnrolledStudents() {
        return enrolledStudents;
    }
    @Override
    public String toString() {
        return "Course ID: " + courseId + 
        		", Course Name: " + courseName + 
        		", Enrolled Students: " + enrolledStudents.size() + "/" + maxCapacity;
    }
}
public class Question2 {
    public static void main(String[] args) {
        Student student1 = new Student(1, "Alice");
        Student student2 = new Student(2, "Bob");
        Student student3 = new Student(3, "Charlie");
        Course course1 = new Course(101, "Java Programming", 1);
        boolean enrolled1 = course1.enrollStudent(student1);
        boolean enrolled2 = course1.enrollStudent(student2);
        boolean enrolled3 = course1.enrollStudent(student3);
        System.out.println(course1); 
        if (enrolled1) {
            System.out.println(student1.getStudentName() + " enrolled in " + course1.getCourseName());
        } else {
            System.out.println(student1.getStudentName() + " couldn't enroll in " + course1.getCourseName() + " (Course is full)");
        }

        if (enrolled2) {
            System.out.println(student2.getStudentName() + " enrolled in " + course1.getCourseName());
        } else {
            System.out.println(student2.getStudentName() + " couldn't enroll in " + course1.getCourseName() + " (Course is full)");
        }
        if (enrolled3) {
            System.out.println(student3.getStudentName() + " enrolled in " + course1.getCourseName());
        } else {
            System.out.println(student3.getStudentName() + " couldn't enroll in " + course1.getCourseName() + " (Course is full)");
        }
    }
}
